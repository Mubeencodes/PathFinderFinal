const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const auth = require('../middleware/auth');

// POST /api/register
router.post('/register', async (req, res) => {
  try {
    const { username, email, password, fullname, bio } = req.body;
    if (!username || !email || !password) {
      return res.status(400).json({ msg: 'Please provide username, email and password' });
    }
    const existing = await User.findOne({ $or: [ { email }, { username } ] });
    if (existing) return res.status(400).json({ msg: 'User with that email or username already exists' });

    const salt = await bcrypt.genSalt(10);
    const passwordHash = await bcrypt.hash(password, salt);

    const user = new User({ username, email, passwordHash, fullname: fullname || '', bio: bio || '' });
    await user.save();

    const payload = { user: { id: user.id } };
    const token = jwt.sign(payload, process.env.JWT_SECRET || 'change_this_secret', { expiresIn: '7d' });

    res.json({ token, user: { id: user.id, username: user.username, email: user.email, fullname: user.fullname, bio: user.bio } });
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// POST /api/login
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).json({ msg: 'Please provide email and password' });

    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ msg: 'Invalid credentials' });

    const isMatch = await bcrypt.compare(password, user.passwordHash);
    if (!isMatch) return res.status(400).json({ msg: 'Invalid credentials' });

    const payload = { user: { id: user.id } };
    const token = jwt.sign(payload, process.env.JWT_SECRET || 'change_this_secret', { expiresIn: '7d' });

    res.json({ token, user: { id: user.id, username: user.username, email: user.email, fullname: user.fullname, bio: user.bio } });
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// GET /api/profile
router.get('/profile', auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-passwordHash');
    if (!user) return res.status(404).json({ msg: 'User not found' });
    res.json(user);
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

// PUT /api/profile
router.put('/profile', auth, async (req, res) => {
  try {
    const { fullname, bio } = req.body;
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ msg: 'User not found' });
    user.fullname = typeof fullname === 'string' ? fullname : user.fullname;
    user.bio = typeof bio === 'string' ? bio : user.bio;
    await user.save();
    res.json({ msg: 'Profile updated', user: { id: user.id, username: user.username, email: user.email, fullname: user.fullname, bio: user.bio } });
  } catch (err) {
    console.error(err);
    res.status(500).send('Server error');
  }
});

module.exports = router;